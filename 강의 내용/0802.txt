예외처리
-프로그램의 예외상황을 처리하는 것
종류 
- 강제예외(throw)
- 예외전가(throws)
- 예외처리 : try() catch()

프로그램을 개발 했을 때 예외상황을 처리 할 때 쓰는 것
ex 게임을 개발한다 했을 때 벽을 만들어놨으니까 개발자는 넘지 말라고
처리하지만 다른 사람은 벽을 넘기도 하는 예외상황이 발생하니까 
벽을 넘지 마세요 라고 처리하는 것.
try 에서 문제가 발생하면 
catch 에서 받아줘서 다음 문장으로 넘어감

문제가 발생하더라도 다음 기능으로 실행이 되게 예외처리를 해준다.
Object  모든 자료형들의 부모
부모형태로는 모든 값들을 다 처리할 수 있다.
return; //해당하는 메소드를 종료하는 기능도 있음
finally{ } 무조건 마지막에 실행
꼭 닫아줘야 되는 작업이 있다면 실행

throws 예외전가
내 코드 안에서 처리하는 게 아니라 예외처리하는 자바에 전가시키는것

문제가 발생하면은 프로그램이 종료가 되어버린다.
문제를 알고 해결할라면은 try catch 로 예외처리해버리고
그냥 넘길라면은 예외전가를 해줘야한다.
받아쓰는 메소드에도 예외전가를 같이 해줘야함

강제예외
평소에 쓸일 없슴
프로그램을 만들었을 때 의도하고 다른데 프로그램상의 문제도 아니고
내가  원하는 방향이 아닐 때 예외를 발생시킴
throw new Exception

thread
- process 보편적으로 실행중인 프로그램들을 프로세스라 한다.
- process를 동작시키는 단위를 Thread
프로그램을 동작시키기 위한 일꾼이 필요
그 일꾼이 Thread
기본적으로 꼭 하나 이상의 Thread가 필요

부모와 똑같은 메소드를 가지고 있다면 자식께 실행
extends Thread 
쓰레드쪽에 start 메소드 실행하면은
우리쪽에서는 반드시 run 메소드를 만들어놓으면 자식 run 메소드가 실행

setDaemon(true)
main 쓰레드가 종료하면 안에서 만든 쓰레드들도 같이 종료해 주세요..

Ex.) 채팅 글 보내는 쓰레드 하나 , 글 받는 쓰레드 하나 있어야됨

JFrame ( 틀 )



