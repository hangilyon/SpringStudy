List

map=hashmap

두개를 사용해서 

Map 
-HashMap
-TreeMap
-HastTable...등등

Map
-{키 : 값}
-순서는 유지되지 않는다.
-키의 중복은 허용하지 않음. 값의 중복은 허용
map.replace( , );  치환하는것 

특정 기능들을 사용을 할 때 변수에다 저장을 하고 싶으면
결과값이 어떤 타입인지 알아야 됨!

HashMap 은 순서가 없지만
LinkedHashMap 순서가 있다.

HashMap 변수 = new HashMap();
변수.put(키,값) ==> 키 : 값 저장
변수.get(키) ==> 키에 저장된 값 출력
변수.containsKey(키) ==> 키 값이 저장되 있으면 true 없으면 false
변수.containsValue(값)==> 값 이 저장되있으면 true 없으면 false
변수.replace(저장된 키, 바꿀 값) ==> 키에 저장된 값을 바꿔주고 예전값이 나온다.
보통은 변수.put(키, 값) 으로 바꾼다.
변수.remove(키) ==> 키와 키에 저장되어 있는 값을 지운다.
변수.KeySet() ==> 저장된 키 를 모두 출력
변수.ValueSet() ==> 은 없다. Value 값만 출력 X

Iterator 
순서가 없는 Set 값을 순서가 생기게 만들어주는 역할
Iterator 변수 = 변수.keySet().iterator(); 
==> HashMap에 저장되어 있는 키 값을 모두 Iterator 변수값에 저장하게 하여 순서를 만들어 준다.
변수.hasNext() ==> 현재 변수에 저장되어있는 다음값이 있으면 true 없으면 false
변수.next() ==> 변수에 저장되어있는 값을 순서대로 한개씩 출력해주는 역할

String
첫번째가 대문자인 자료형은 .을 찍었을 때 기능을 제공함
변수1 = 변수2.toUpperCase(); ==> 변수2의 값을 대문자로 변환해 변수1에 저장
변수1 = 변수2.toLowerCase(); ==> 변수2의 값을 소문자로 변환해 변수 1에 저장
변수.length() ==> 변수의 길이

int 를 문자열로 써야 될때는 +" ";
문자열 숫자를 int형태로 변환할 때
변수 1 = Integer.parseInt(s);
소문자 - 32 = 대문자
대문자 +32 = 소문자
변수.trim();  ==> 양쪽의 공백이 사라진다.



