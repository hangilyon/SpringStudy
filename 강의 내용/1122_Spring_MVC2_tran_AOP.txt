트랜잭션
AOP
//
	//table 생성
		create table user_info(
		user_num number(5)
		);


		create table system_info(
		system_num number(5),
		constraint test_name check(system_num<=5)
		);	
		
	// form.xml 설정
		<!-- HikariCP -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>3.3.1</version>
		</dependency>
		   <!-- spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		   <!-- ojdbc6 -->
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0.4</version>
		</dependency>
		   <!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		   <!-- mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>	
		
	// 	root-context.xml 설정
	   <!-- 히카리 커넥션풀 빈 등록 -->
	   <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		  <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" />
		  <property name="username" value="java1" />
		  <property name="password" value="1234" />
	   </bean>   
	   <!-- 히카리 데이터소스 빈 등록 -->   
	   <bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
		  <constructor-arg ref="hikariConfig"/>
	   </bean>
	   
	   <!-- 데이터소스 마이바티스에 등록 및 xml 위치 설정 -->
	   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		  <property name="dataSource" ref="ds"/>
		  <property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>
	   </bean>
	   <!-- 마이바티스 xml파일과 dao빈 연결  -->
	   <mybatis-spring:scan base-package="com.care.root.mapper"/>

// 트랜잭션 : 롤백 , 커밋
	사용자가 무언가 처리를 했으면 시스템에서도 처리가 되어야 한다.
	사용자에서 처리를 했는데 문제가 생겨 시스템 테이블 처리가 되지 않은 경우,
	사용자에서 처리를 했던 것을 롤백한다.
	두개 다 성공을 해야 저장을 시켜준다.
	여러 개 중 하나라도 실패하면 모든 처리를 취소시킨다.
	
	// TestController
		@GetMapping("buy_form")
		public String buy_form() {
			return "buy_form";
		}	
	// buy_form.jsp
		몇개를 구매하시겠습니까?
		<form action="buy" method="post">
			<input type="text" name="num"><br>
			<input type="submit" value="구매">
			<button type="button" onclick="location.href='db_result'">
		   db결과 페이지
			</button>
		</form>
	
	// TestController
		@Autowired TestServiceImpl ts;
		
		@PostMapping("buy")
		public String buy(Model model,
				@RequestParam(required=false, defaultValue="0") int num) {
			ts.buy(model,num);
			return "result";
		}	
		
	// TestServiceImpl
		@Service
		public class TestServiceImpl {
			@Autowired TestMapper mapper;
			public void buy(Model model, int num) {
		   int[] result = {0,0};
		   try {
			   result[0] = mapper.userInsert(num);
			   result[1] = mapper.systemInsert(num);
		   } catch (Exception e) {
			   e.printStackTrace();
		   }
		   model.addAttribute("result",result);
			}
		}
		
	// mapper
		<insert id="userInsert"  >
		   insert into user_info values(#{num})
		</insert>
		<insert id="systemInsert">
		   insert into system_info values(#{num})
		</insert>
		
	// result.jsp
		<h3>결과 페이지 입니다</h3>
		1 : 성공 , 0 : 실패<br>
		사용자(user_info) : ${result[0] }<br>
		시스템(sys_info) : ${result[1] }<br>
		<hr>
		<a href="buy_form">돌아가기</a>&nbsp;&nbsp;
		<a href="db_result">데이터베이스 확인하기</a>	
	
	// 3개를 입력 시 db에 둘다 들어감, 6개를 입력 시 user_info 에만 입력 , sys_info 에는 입력 안됌
	
	// db_result 확인 Controller
	
	// TestServiceImpl
	
	// mapper
		public List<UserDTO> userDBResult();
		public List<SystemDTO> systemDBResult();
	// sql
		<resultMap type="com.care.root.dto.UserDTO" id="user">
		<result property="userNum" column="user_num"/>
		</resultMap>
		<resultMap type="com.care.root.dto.SystemDTO" id="system">
		   <result property="systemNum" column="system_num"/>
		</resultMap>
		<select id="userDBResult" resultMap="user">
		   select * from user_info
		</select>
		<select id="systemDBResult" resultMap="system">
		   select * from system_info
		</select>
		
	// db_result.jsp
		<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
		<table border="1">
			<tr> 
		   <th>user</th> 
		   <c:forEach var="u" items="${user }">
			   <td>${u.userNum }</td> 
		   </c:forEach>
			</tr>
			<tr> 
		   <th>system</th> 
		   <c:forEach var="s" items="${system }">
			   <td>${s.systemNum }</td> 
		   </c:forEach>
			</tr>
		</table>
	
// 트랜젝션 적용
	// porm.xml
		 <!-- 트랜잭션 -->
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-tx</artifactId>
		  <version>${org.springframework-version}</version>
		</dependency>
	
	// Configuration 으로 설정
		@Configuratio
		@EnableTransactionManagement
		public class TxConfig {
			@Autowired HikariDataSource ds;
			@Bean
			public PlatformTransactionManager transactionManager() {
		   DataSourceTransactionManager txMgr = new DataSourceTransactionManager();
		   txMgr.setDataSource(ds);
		   return txMgr;
			}
		}
	// Bean으로 설정
	  <!-- 데이터베이스 롤백 -->
		<bean name="txMgr"
		 class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		  <property name="dataSource" ref="ds" />
		</bean>
	
	// 메소드 위에 @Transactional 주입
	// catch 부분에
TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); 넣어주면 끝
		
// AOP 횡단주입 , 횡단관심사
만든 로직에 어떠한 것도 손대지 않고 따로 하나의 로직을 만들어서 조립하는 방식
공통파일 , 공통 기능 등을 AOP로 만들어서 사용
흐름에 대해 따로 기본로직에 수정이 필요하지 않음
		
	// form.xml 디펜던시 삽입
		<!-- AOP -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.6</version>
		</dependency> 
		<dependency> 
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.8.6</version>
		</dependency>	
	
	// root-context.xml 에 config 파일 생성
		package com.care.root;

		import org.aspectj.lang.ProceedingJoinPoint;
		import org.aspectj.lang.annotation.After;
		import org.aspectj.lang.annotation.Around;
		import org.aspectj.lang.annotation.Aspect;
		import org.aspectj.lang.annotation.Before;
		import org.springframework.context.annotation.EnableAspectJAutoProxy;
		import org.springframework.stereotype.Component;

		@Component // 컴포넌트 
		@Aspect		// 이 클래스를 AOP로 사용 하겠습니다
		@EnableAspectJAutoProxy	// Aspect 어노테이션이 붙은 것들을 다 찾아 줌 (최상위에 넣으면 하위 전부를 찾아 줌)
		public class AOPConfig {
			// 이 메소드가 실행되기 전에 , 끝난 다음에 확인 총 두 번 실행된다.
			* : 반환타입이 어떤 것이든 상관없다 , .. : 매개변수가 한개 이상
		   @Around("execution(* com.care.root.controller.TestController.buy_form(..))")
		   public void commonAop(ProceedingJoinPoint joinpoint) {
			  try {
				 System.out.println("==== 컨트롤러 공통기능 시작 ====");
				 // 멈추고 메소드로 갔다가 후에 시작
				 joinpoint.proceed();
				 System.out.println("==== 컨트롤러 공통기능 종료 ====");
			  } catch (Throwable e) {
				 e.printStackTrace();
			  }
		   }
		   // 이 메소드가 실행되기 전에 실행하라
		   @Before("execution(* com.care.root.service.TestServiceImpl.buy(..))")
		   public void commonAop02() {
			  System.out.println("==== service 공통 기능(buy) 시작====");
		   }
		   // 이 메소드가 종료되면 실행해라
		   @After("execution(* com.care.root.service.TestServiceImpl.dbResult(..))")
		   public void commonAop03() {
			  System.out.println("==== service 공통 기능(db_result) 종료====");
		   }
		}		
	// 컨트롤러로 어떠한 데이터가 들어왔는데 미리 연산을 해야하거나 종료 후에 사용하거나 전체적으로 로그를 찍고싶다 등등 사용
	
	// AOP 로 로그 확인하는 방법
	   Logger LOG = Logger.getGlobal();
	   @Around("execution(* com.care.root.controller.*.*(..))")
	   public Object commonAop0(ProceedingJoinPoint joinpoint) {
		  
		  Object[] params = joinpoint.getArgs();
		  for(Object param : params) {
			  LOG.log(Level.INFO,"호출된 메소드의 param : "+param);
		  }
		  Object obj = null;
		   try {
			   obj = joinpoint.proceed();
			   System.out.println("==== 컨트롤러 공통기능 종료 ====");
		   } catch (Throwable e) {
			   e.printStackTrace();
		   }
		   LOG.log(Level.INFO,"호출된 메소드 : "+obj);
		   // return 을 해주지 않으면 404에러
		   return obj;
	   }
	// 인터셉터랑 유사하지만 늦게 동작
	
	// testChart.jsp
		<%@ page language="java" contentType="text/html; charset=UTF-8"
		   pageEncoding="UTF-8"%>
		<!DOCTYPE html>
		<html>
		<head>
		<meta charset="UTF-8">
		<title>Insert title here</title>
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		<script type="text/javascript">
		   google.charts.load('current', {'packages' : [ 'bar' ]});
		   google.charts.setOnLoadCallback(drawChart);
		   function drawChart() {
			  data = new google.visualization.DataTable();
			  data.addColumn('string', '년도별');
			  data.addColumn('number', 'test01');
			  data.addColumn('number', 'test02');
			  data.addColumn('number', 'test03');
			  data.addRow(['1월' ,1000, 895 ,915]);

			  options = {
				 chart : {
					title : "main title",
					subtitle : 'sub title',
				 }
			  }
			  chart = new google.charts.Bar(document.getElementById('columnchart_material'));
			  chart.draw(data, google.charts.Bar.convertOptions(options));
		   }
		</script>
		</head>
		<body>
		   <div id="columnchart_material"></div>
		</body>
		</html>

	// 디비설계에 주력할 것
	할 때 어느정도 중요하게 생각하는게 있다는 코드 같이 넣어서 설명
	팀원 ,업무분담 , 제작 날짜 , 만들게 된 목적 , 등을 인트로에 넣는다
	사용자 관점 , 관리자 관점 해주는게 좋음
	User case , admin case
	한사람당 사이트 분석으로 장점, 단점을 각기 세 가지씩 찾아라
	화면 기능설계 사이트
	https://ovenapp.io/
	데이터베이스 설계
	https://aquerytool.com/
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		